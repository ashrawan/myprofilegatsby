name: Build and Deploy Website

on:
  push:
    branches:
      - master

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build and deploy Vite site
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2.3.1
      
      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '16.17.1'
      
      - name: Install Project Dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
      
      - name: Verify build output
        run: ls -la dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::134440022670:role/githhub_gatsy_myprofile_cicd
          aws-region: us-east-1

      - name: Upload to S3
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          # Generate a unique deployment identifier
          DEPLOY_TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          
          # Create a deployment folder with timestamp
          aws s3 sync dist "s3://$S3_BUCKET/deploy-$DEPLOY_TIMESTAMP" --delete --exact-timestamps \
            --cache-control "public, max-age=31536000, immutable"
          
          # Update the latest symlink/pointer
          aws s3api put-object --bucket "$S3_BUCKET" --key "latest" --body <(echo "deploy-$DEPLOY_TIMESTAMP")
          
          # Update index.html with no-cache to always fetch the latest
          aws s3 cp "s3://$S3_BUCKET/deploy-$DEPLOY_TIMESTAMP/index.html" "s3://$S3_BUCKET/index.html" \
            --cache-control "no-cache, must-revalidate" --content-type "text/html"
          
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::134440022670:role/githhub_gatsy_myprofile_cicd
          aws-region: us-east-1

      - name: Invalidate CloudFront cache
        env:
          DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
        run: |
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"